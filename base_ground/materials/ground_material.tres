[gd_resource type="VisualShader" load_steps=14 format=2]

[ext_resource path="res://textures/dirt/Dirt_01_Nrm.png" type="Texture" id=1]
[ext_resource path="res://textures/dirt/Dirt_01.png" type="Texture" id=2]

[sub_resource type="VisualShaderNodeColorConstant" id=6]
constant = Color( 0, 1, 0, 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=7]
operator = 1

[sub_resource type="VisualShaderNodeVectorFunc" id=8]
function = 5

[sub_resource type="VisualShaderNodeVectorOp" id=10]
operator = 2

[sub_resource type="VisualShaderNodeColorConstant" id=11]
constant = Color( 0.452102, 0.452102, 0.452102, 1 )

[sub_resource type="VisualShaderNodeTexture" id=1]
texture = ExtResource( 2 )
texture_type = 1

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=3]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 20, 20, 20 ) ]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=4]
texture = ExtResource( 1 )
texture_type = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=5]
constant = 20.0

[sub_resource type="VisualShaderNodeVectorFunc" id=9]
function = 4

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_2 : hint_albedo;
uniform sampler2D tex_frg_5 : hint_normal;



void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Scalar:6
	float n_out6p0 = 20.000000;

// VectorOp:4
	vec3 n_out4p0 = n_out3p0 * vec3(n_out6p0);

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out4p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// VectorFunc:9
	vec3 n_out9p0;
	{
		vec3 c = n_out2p0;
		vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
		vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
		vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
		float d = q.x - min(q.w, q.y);
		float e = 1.0e-10;
		n_out9p0 = vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
	}

// Color:10
	vec3 n_out10p0 = vec3(0.000000, 1.000000, 0.000000);
	float n_out10p1 = 1.000000;

// VectorOp:11
	vec3 n_out11p0 = n_out9p0 - n_out10p0;

// VectorFunc:12
	vec3 n_out12p0;
	{
		vec3 c = n_out11p0;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		n_out12p0 = c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}

// Color:14
	vec3 n_out14p0 = vec3(0.452102, 0.452102, 0.452102);
	float n_out14p1 = 1.000000;

// VectorOp:13
	vec3 n_out13p0 = n_out12p0 * n_out14p0;

// Texture:5
	vec4 tex_frg_5_read = texture(tex_frg_5, n_out4p0.xy);
	vec3 n_out5p0 = tex_frg_5_read.rgb;
	float n_out5p1 = tex_frg_5_read.a;

// Output:0
	ALBEDO = n_out13p0;
	NORMALMAP = n_out5p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -326.308, -85.738 )
nodes/fragment/0/position = Vector2( 860, 80 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 240, -100 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -300, -20 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -60, -20 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( 240, 160 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( -300, 100 )
nodes/fragment/9/node = SubResource( 9 )
nodes/fragment/9/position = Vector2( 460, -280 )
nodes/fragment/10/node = SubResource( 6 )
nodes/fragment/10/position = Vector2( 480, -200 )
nodes/fragment/11/node = SubResource( 7 )
nodes/fragment/11/position = Vector2( 660, -200 )
nodes/fragment/12/node = SubResource( 8 )
nodes/fragment/12/position = Vector2( 860, -140 )
nodes/fragment/13/node = SubResource( 10 )
nodes/fragment/13/position = Vector2( 620, -20 )
nodes/fragment/14/node = SubResource( 11 )
nodes/fragment/14/position = Vector2( 460, 40 )
nodes/fragment/connections = PoolIntArray( 3, 0, 4, 0, 5, 0, 0, 8, 4, 0, 2, 0, 4, 0, 5, 0, 6, 0, 4, 1, 2, 0, 9, 0, 9, 0, 11, 0, 10, 0, 11, 1, 11, 0, 12, 0, 12, 0, 13, 0, 13, 0, 0, 0, 14, 0, 13, 1 )
